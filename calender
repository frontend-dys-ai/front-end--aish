import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'dart:math' show pi, sin, cos;

void main() {
  runApp(const DysaiApp());
}

class DysaiApp extends StatelessWidget {
  const DysaiApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dysai Calendar',
      theme: ThemeData(
        primaryColor: const Color(0xFF234530),
        scaffoldBackgroundColor: const Color(0xFFF8EED0),
        fontFamily: 'Georgia',
      ),
      home: const CalendarScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class CalendarScreen extends StatefulWidget {
  const CalendarScreen({Key? key}) : super(key: key);

  @override
  State<CalendarScreen> createState() => _CalendarScreenState();
}

class _CalendarScreenState extends State<CalendarScreen> {
  DateTime _currentMonth = DateTime(2024, 4);
  DateTime? _periodStartDate;
  DateTime? _periodEndDate;
  
  final Color _primaryGreen = const Color(0xFF234530);
  final Color _periodColor = const Color(0xFFAAC19A);
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Stack(
          children: [
            // Top-left flower decoration
            Positioned(
              left: 0,
              top: 10,
              child: CustomPaint(
                size: const Size(120, 180),
                painter: FlowerBranchPainter(
                  color: _primaryGreen,
                  flowerColor: const Color(0xFFEEE8CF),
                ),
              ),
            ),
            
            // Bottom-right flower decoration - positioned behind the button
            Positioned(
              right: 0,
              bottom: 0,
              child: CustomPaint(
                size: const Size(100, 120),
                painter: FlowerBranchPainter(
                  color: _primaryGreen.withOpacity(0.7),
                  flowerColor: const Color(0xFFEEE8CF).withOpacity(0.7),
                ),
              ),
            ),
            
            Padding(
              padding: const EdgeInsets.all(20.0),
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    const SizedBox(height: 40),
                    _buildHeader(),
                    const SizedBox(height: 15),
                    Text(
                      'Select the start and end of your period.',
                      style: TextStyle(
                        fontSize: 16,
                        color: _primaryGreen,
                        fontWeight: FontWeight.w500,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 25),
                    _buildCalendarHeader(),
                    const SizedBox(height: 15),
                    _buildCalendarGrid(),
                    const SizedBox(height: 40),
                    _buildContinueButton(),
                    const SizedBox(height: 20),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Column(
      children: [
        Text(
          'dysai',
          style: TextStyle(
            fontSize: 40,
            fontWeight: FontWeight.bold,
            color: _primaryGreen,
          ),
        ),
        const SizedBox(height: 10),
        Text(
          'Calendar',
          style: TextStyle(
            fontSize: 32,
            fontWeight: FontWeight.bold,
            color: _primaryGreen,
          ),
        ),
      ],
    );
  }

  Widget _buildCalendarHeader() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        IconButton(
          icon: Icon(Icons.chevron_left, color: _primaryGreen),
          onPressed: _previousMonth,
        ),
        Text(
          DateFormat('MMMM yyyy').format(_currentMonth),
          style: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            color: _primaryGreen,
          ),
        ),
        IconButton(
          icon: Icon(Icons.chevron_right, color: _primaryGreen),
          onPressed: _nextMonth,
        ),
      ],
    );
  }

  Widget _buildCalendarGrid() {
    return Column(
      children: [
        _buildWeekdayHeaders(),
        const SizedBox(height: 10),
        ..._buildCalendarDays(),
      ],
    );
  }

  Widget _buildWeekdayHeaders() {
    const weekdays = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
      children: weekdays.map((day) {
        return SizedBox(
          width: 30,
          child: Text(
            day,
            style: TextStyle(
              fontWeight: FontWeight.bold,
              color: _primaryGreen,
            ),
            textAlign: TextAlign.center,
          ),
        );
      }).toList(),
    );
  }

  List<Widget> _buildCalendarDays() {
    List<Widget> rows = [];
    final firstDayOfMonth = DateTime(_currentMonth.year, _currentMonth.month, 1);
    final daysInMonth = DateTime(_currentMonth.year, _currentMonth.month + 1, 0).day;
    
    // Calculate the number of blank spaces before the first day
    int firstWeekdayOfMonth = firstDayOfMonth.weekday % 7; // Adjust for Sunday start
    
    // Create calendar rows
    int dayCounter = 1;
    for (int week = 0; dayCounter <= daysInMonth; week++) {
      List<Widget> rowChildren = [];
      
      for (int i = 0; i < 7; i++) {
        if ((week == 0 && i < firstWeekdayOfMonth) || dayCounter > daysInMonth) {
          // Empty space
          rowChildren.add(const SizedBox(width: 30));
        } else {
          final currentDate = DateTime(_currentMonth.year, _currentMonth.month, dayCounter);
          bool isInPeriod = false;
          
          // Check if the date is within the selected period
          if (_periodStartDate != null && _periodEndDate != null) {
            isInPeriod = currentDate.compareTo(_periodStartDate!) >= 0 && 
                         currentDate.compareTo(_periodEndDate!) <= 0;
          }
          
          // Check if it's start or end date
          bool isStartDate = _periodStartDate != null &&
                            currentDate.year == _periodStartDate!.year &&
                            currentDate.month == _periodStartDate!.month &&
                            currentDate.day == _periodStartDate!.day;
                            
          bool isEndDate = _periodEndDate != null &&
                          currentDate.year == _periodEndDate!.year &&
                          currentDate.month == _periodEndDate!.month &&
                          currentDate.day == _periodEndDate!.day;
                          
          rowChildren.add(
            _buildCalendarDay(
              day: dayCounter,
              isInPeriod: isInPeriod,
              isStartDate: isStartDate,
              isEndDate: isEndDate,
              date: currentDate,
            ),
          );
          dayCounter++;
        }
      }
      
      rows.add(
        Padding(
          padding: const EdgeInsets.only(bottom: 10),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: rowChildren,
          ),
        ),
      );
    }
    
    return rows;
  }

  Widget _buildCalendarDay({
    required int day,
    required bool isInPeriod,
    required bool isStartDate,
    required bool isEndDate,
    required DateTime date,
  }) {
    return GestureDetector(
      onTap: () => _selectDate(date),
      child: Stack(
        alignment: Alignment.center,
        children: [
          // Background for period days
          if (isInPeriod)
            Container(
              width: 40,
              height: 40,
              decoration: BoxDecoration(
                color: _periodColor,
                borderRadius: BorderRadius.horizontal(
                  left: Radius.circular(isStartDate ? 20 : 0),
                  right: Radius.circular(isEndDate ? 20 : 0),
                ),
              ),
            ),
            
          // Day number
          SizedBox(
            width: 30,
            height: 30,
            child: Center(
              child: Text(
                day.toString(),
                style: TextStyle(
                  color: isInPeriod ? Colors.white : _primaryGreen,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
          
          // Flower icons
          if (isInPeriod)
            Positioned(
              top: 5,
              child: CustomPaint(
                size: const Size(10, 10),
                painter: FlowerIconPainter(color: Colors.white),
              ),
            ),
            
          // Start label
          if (isStartDate)
            Positioned(
              bottom: -3,
              child: Text(
                'Start',
                style: TextStyle(
                  fontSize: 10,
                  color: _primaryGreen,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
            
          // End label
          if (isEndDate)
            Positioned(
              bottom: -3,
              child: Text(
                'End',
                style: TextStyle(
                  fontSize: 10,
                  color: _primaryGreen,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildContinueButton() {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(30),
        boxShadow: [
          BoxShadow(
            color: _primaryGreen.withOpacity(0.3),
            blurRadius: 8,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: ElevatedButton(
        onPressed: _periodStartDate != null && _periodEndDate != null ? _continueTapped : null,
        style: ElevatedButton.styleFrom(
          backgroundColor: _primaryGreen,
          foregroundColor: Colors.white,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(30),
          ),
          padding: const EdgeInsets.symmetric(vertical: 16),
          disabledBackgroundColor: _primaryGreen.withOpacity(0.5),
          disabledForegroundColor: Colors.white.withOpacity(0.7),
          elevation: 0,
        ),
        child: const Text(
          'Continue',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            letterSpacing: 0.5,
          ),
        ),
      ),
    );
  }

  void _previousMonth() {
    setState(() {
      _currentMonth = DateTime(_currentMonth.year, _currentMonth.month - 1);
    });
  }

  void _nextMonth() {
    setState(() {
      _currentMonth = DateTime(_currentMonth.year, _currentMonth.month + 1);
    });
  }

  void _selectDate(DateTime date) {
    setState(() {
      if (_periodStartDate == null || 
          (_periodStartDate != null && _periodEndDate != null)) {
        // Start new selection
        _periodStartDate = date;
        _periodEndDate = null;
      } else if (date.compareTo(_periodStartDate!) < 0) {
        // Selected date is before start date, make it the new start date
        _periodStartDate = date;
      } else {
        // Selected date is after start date, set it as end date
        _periodEndDate = date;
      }
    });
  }

  void _continueTapped() {
    if (_periodStartDate != null && _periodEndDate != null) {
      final days = _periodEndDate!.difference(_periodStartDate!).inDays + 1;
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            'Period set: ${DateFormat('MMM d').format(_periodStartDate!)} - '
            '${DateFormat('MMM d').format(_periodEndDate!)} ($days days)',
          ),
          backgroundColor: _primaryGreen,
        ),
      );
      
      // Here you would navigate to the next screen or save the data
    }
  }
}

// Custom painters for the decorative elements

class FlowerIconPainter extends CustomPainter {
  final Color color;
  
  FlowerIconPainter({required this.color});
  
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = color
      ..style = PaintingStyle.fill;
    
    // Center circle
    canvas.drawCircle(
      Offset(size.width / 2, size.height / 2),
      size.width * 0.2,
      paint,
    );
    
    // Petals
    for (int i = 0; i < 5; i++) {
      final angle = 2 * pi * i / 5;
      final x = size.width / 2 + size.width * 0.4 * cos(angle);
      final y = size.height / 2 + size.height * 0.4 * sin(angle);
      
      canvas.drawCircle(
        Offset(x, y),
        size.width * 0.3,
        paint,
      );
    }
  }
  
  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}

class FlowerBranchPainter extends CustomPainter {
  final Color color;
  final Color flowerColor;
  
  FlowerBranchPainter({required this.color, required this.flowerColor});
  
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = color
      ..style = PaintingStyle.fill
      ..strokeWidth = 2.5
      ..strokeCap = StrokeCap.round;
    
    // Main stem
    final stemPath = Path()
      ..moveTo(size.width * 0.7, 0)
      ..quadraticBezierTo(
        size.width * 0.4, size.height * 0.5,
        size.width * 0.3, size.height
      );
    
    canvas.drawPath(stemPath, paint..style = PaintingStyle.stroke);
    
    // Secondary branch
    final branch = Path()
      ..moveTo(size.width * 0.6, size.height * 0.3)
      ..quadraticBezierTo(
        size.width * 0.3, size.height * 0.4,
        size.width * 0.1, size.height * 0.3
      );
    
    canvas.drawPath(branch, paint..style = PaintingStyle.stroke);
    
    // More branches
    final smallBranch = Path()
      ..moveTo(size.width * 0.5, size.height * 0.55)
      ..quadraticBezierTo(
        size.width * 0.35, size.height * 0.6,
        size.width * 0.25, size.height * 0.5
      );
    
    canvas.drawPath(smallBranch, paint..style = PaintingStyle.stroke);
    
    // Leaves
    _drawLeaf(canvas, paint, size.width * 0.6, size.height * 0.2, 45, size.width * 0.15);
    _drawLeaf(canvas, paint, size.width * 0.4, size.height * 0.5, 30, size.width * 0.2);
    _drawLeaf(canvas, paint, size.width * 0.3, size.height * 0.7, 15, size.width * 0.15);
    _drawLeaf(canvas, paint, size.width * 0.15, size.height * 0.35, 70, size.width * 0.12);
    
    // Flowers
    _drawFlower(canvas, size.width * 0.5, size.height * 0.3, size.width * 0.12);
    _drawFlower(canvas, size.width * 0.35, size.height * 0.6, size.width * 0.1);
    _drawFlower(canvas, size.width * 0.25, size.height * 0.85, size.width * 0.15);
    _drawFlower(canvas, size.width * 0.15, size.height * 0.45, size.width * 0.09);
    _drawFlower(canvas, size.width * 0.1, size.height * 0.25, size.width * 0.11);
  }
  
  void _drawLeaf(Canvas canvas, Paint paint, double x, double y, double angle, double size) {
    canvas.save();
    canvas.translate(x, y);
    canvas.rotate(angle * pi / 180);
    
    final leafPath = Path()
      ..moveTo(0, 0)
      ..quadraticBezierTo(size * 0.5, -size * 0.5, size, 0)
      ..quadraticBezierTo(size * 0.5, size * 0.5, 0, 0)
      ..close();
    
    canvas.drawPath(leafPath, paint..style = PaintingStyle.fill);
    canvas.restore();
  }
  
  void _drawFlower(Canvas canvas, double x, double y, double size) {
    // Flower center
    canvas.drawCircle(
      Offset(x, y),
      size * 0.3,
      Paint()..color = color,
    );
    
    // Flower petals
    final petalPaint = Paint()..color = flowerColor;
    
    for (int i = 0; i < 6; i++) {
      final angle = 2 * pi * i / 6;
      final petalX = x + size * 0.7 * cos(angle);
      final petalY = y + size * 0.7 * sin(angle);
      
      canvas.drawCircle(
        Offset(petalX, petalY),
        size * 0.45,
        petalPaint,
      );
    }
    
    // Add yellow center for more visual interest
    canvas.drawCircle(
      Offset(x, y),
      size * 0.15,
      Paint()..color = const Color(0xFFF5E48E),
    );
  }
  
  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}
